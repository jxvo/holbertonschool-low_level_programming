#include "sort.h"

/**
 * cocktail_sort_list - sorts a Doubly-LL in ascending order (cocktail sort)
 * @list: double pointer to head node of doubly linked list
 *
 * Return: nothing!
 */
void cocktail_sort_list(listint_t **list)
{
	listint_t *margarita;
	int swapped;

	if (!list || !*list)
		return;
}

/**
 * swap_node - swaps 'prev' and 'next' pointers of a node and the one before it
 * @node: pointer to node
 *
 * Description: assumes there are two nodes to swap and tries for a full four
 * Return: nothing!
 */
void swap_node(listint_t *node)
{
        if (!node || !node->prev)
                return;
        node->prev->next = node->next;
        if (node->next)
                node->next->prev = node->prev;
        node->next = node->prev;
        if (node->prev->prev)
                node->prev = node->prev->prev;
        else
                node->prev = NULL;
        node->next->prev = node;
}
